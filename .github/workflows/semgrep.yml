# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow file requires a free account on Semgrep.dev to
# manage rules, file ignores, notifications, and more.
#
# See https://semgrep.dev/docs

name: PR Semgrep Scan

on:
  pull_request:
    branches:
      - master

permissions:
  contents: read
  security-events: write

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Call Semgrep FastAPI scanner
        id: scan
        env:
          API_URL: ${{ secrets.SEMGREP_API_URL }}
        run: |
          PR_ID="${{ github.event.pull_request.number }}"
          COMMIT="${{ github.event.pull_request.head.sha }}"
          REPO="${{ github.event.pull_request.head.repo.clone_url }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          RESPONSE=$(curl -s -X POST "$API_URL/scan_pr" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.API_KEY }}" \
            -d "{\"pr_id\": \"$PR_ID\", \"repo_url\": \"$REPO\", \"commit_hash\": \"$COMMIT\", \"pr_url\": \"$PR_URL\"}")

          # Write the response to a file
          echo "$RESPONSE" > response.json

          # Extract values from the JSON response
          SCAN_STATUS=$(jq -r '.status // "empty"' response.json)
          SCAN_ID=$(jq -r '.scan_id // "empty"' response.json)

          # Set environment variables for subsequent steps
          echo "SCAN_STATUS=$SCAN_STATUS" >> $GITHUB_ENV
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV

      - name: Download SARIF file
        # Only run this step if the scan was completed (either passed or blocked)
        if: env.SCAN_STATUS != 'empty'
        env:
          API_URL: ${{ secrets.SEMGREP_API_URL }}
        run: |
          # Use the API key to authenticate the download request
          curl -s -H "X-API-Key: ${{ secrets.API_KEY }}" "$API_URL/sarif/${{ env.SCAN_ID }}" > semgrep_results.sarif
          echo "SARIF_FILE=semgrep_results.sarif" >> $GITHUB_ENV
        continue-on-error: true

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}
        # Run this step only if the SARIF file exists
        if: success() && env.SARIF_FILE

      - name: Wait for Approval
        if: env.SCAN_STATUS == 'blocked'
        env:
          API_URL: ${{ secrets.SEMGREP_API_URL }}
        run: |
          echo "Waiting for security approval..."
          for i in {1..30}; do
            # Use the API key to authenticate the status check
            STATUS=$(curl -s -H "X-API-Key: ${{ secrets.API_KEY }}" "$API_URL/status/${{ env.SCAN_ID }}" | jq -r '.status')
            echo "Approval status: $STATUS"
            if [[ "$STATUS" == "approve" ]]; then
              echo "Approved! Proceeding..."
              exit 0
            elif [[ "$STATUS" == "reject" ]]; then
              echo "Rejected by security"
              exit 1
            fi
            sleep 20
          done
          echo "Timeout waiting for approval"
          exit 1
